[
  {
    "id": 1,
    "title": "Process of Converting the Website to Dark Mode",
    "excerpt": "A walkthrough of implementing dark mode functionality, including the challenges faced and solutions implemented during the portfolio development process.",
    "content": "<h2 class='text-3xl font-bold mb-4'>Introduction</h2><p class='mb-6'>In the second half of the portfolio assignment, we were tasked with introducing dark mode. Since my original color scheme was already in dark mode, I ultimately decided to lighten the dark blue tones on my webpage. However, during this process, I encountered a few unexpected challenges.</p><h2 class='text-3xl font-bold mb-4'>Process</h2><p class='mb-6'>I started by modifying my existing footer component to include a toggle button using light and dark SVG icons. I adjusted the viewBox properties and kept one icon hidden so it could be toggled later via JavaScript.</p><p class='mb-6'>In my central script.js file (which is linked to every HTML page), I created a function to target the dark mode toggle button. This function updates the button's classList to toggle its visibility when clicked. It also triggers another function that toggles the dark class on the &lt;html&gt; element, enabling Tailwind CSS to switch between light and dark themes.</p><p class='mb-6'>In the HTML, Tailwind CSS provides the ability to use the dark: prefix to define dark mode styles, with light mode as the default. I decided to have dark mode enabled by default as a personal preference. This is when I began to encounter my first set of problems, and here's how I approached solving them:</p><h2 class='text-3xl font-bold mb-4'>Problem 1: Tailwind Version Compatibility</h2><p class='mb-6'>In Tailwind CSS version 4.0, the tailwind.config.js file was removed, as the framework shifted toward a more CSS-only direction. This eliminated the ability to set darkMode: 'class' in the config file, which allows dark mode to be toggled via class changes instead of relying on the user's system preferences. After thoroughly reviewing the documentation, I decided that the most efficient solution was to downgrade to an earlier version of Tailwind that still supports tailwind.config.js, allowing me to control dark mode behavior as needed.</p><h2 class='text-3xl font-bold mb-4'>Problem 2: Screen Flickering</h2><p class='mb-6'>Once dark mode was working, I noticed that the screen would flicker during page loads. To resolve this, I added a script to each page that sets the current dark mode state immediately on load. This eliminated the flickering and ensured a smooth transition.</p><h2 class='text-3xl font-bold mb-4'>Conclusion</h2><p class='mb-6'>By following the steps above, I was able to implement an effective and seamless dark mode/light mode toggle with minimal issues. Despite the setbacks, I learned a lot about Tailwind's architecture and how to troubleshoot real-world integration problems.</p>",
    "date": "2025-01-15",
    "tags": ["Dark Mode", "Tailwind CSS", "JavaScript", "Web Development"],
    "slug": "process-converting-website-dark-mode",
    "image": "./images/dark-mode.jpeg"
  },
  {
    "id": 4,
    "title": "Creating a Dynamic Blog System with JSON and JavaScript",
    "excerpt": "A step-by-step walkthrough of building a dynamic blog system that loads posts from JSON data, making it easy to add new content without touching HTML.",
    "content": "<h2 class='text-3xl font-bold mb-4'>Introduction</h2><p class='mb-6'>After building the basic portfolio pages, I wanted to add a blog section that could dynamically load posts without having to create individual HTML files for each article. The goal was to have a system where I could just add a new entry to a JSON file and have it automatically appear on the blog listing and be accessible as its own page.</p><h2 class='text-3xl font-bold mb-4'>Setting Up the Data Structure</h2><p class='mb-6'>I started by creating a simple JSON file called posts.json in a data folder. Each blog post is an object with properties like id, title, excerpt, content, date, tags, and a slug for the URL. The slug is what makes each post accessible through a unique web address.</p><p class='mb-6'>The content field contains the actual blog post HTML, which means I can include headings, paragraphs, and styling classes directly in the JSON. This keeps everything in one place and makes it easy to format posts consistently.</p><h2 class='text-3xl font-bold mb-4'>Building the Blog Listing Page</h2><p class='mb-6'>For the blog listing, I used JavaScript's fetch API to load the JSON data when the page loads. Then I loop through each post and dynamically create HTML elements for the blog cards. Each card shows the title, excerpt, tags, and date, plus a \"View Post\" button that links to the individual post page.</p><p class='mb-6'>The best part is using template literals in JavaScript to build the HTML structure. I can insert the post data directly into the HTML template, and everything gets styled with Tailwind CSS classes automatically.</p><h2 class='text-3xl font-bold mb-4'>Creating Individual Post Pages</h2><p class='mb-6'>The individual blog post page was trickier. I needed to figure out which post to display based on the URL. I used URL parameters for this - when you click a blog post link, it goes to something like blogpost.html?slug=my-post-name.</p><p class='mb-6'>Then JavaScript reads that slug parameter, fetches the same JSON file, finds the matching post, and populates the page with that post's title, date, content, and tags. It's like having a template that gets filled in with different content depending on which post you're viewing.</p><h2 class='text-3xl font-bold mb-4'>Making It All Work Together</h2><p class='mb-6'>The final step was making sure the navigation worked smoothly. The \"View Post\" buttons on the blog listing needed to link to the individual post page with the correct slug parameter. I also added a \"Back to Blog\" button on each post to complete the user experience.</p><h2 class='text-3xl font-bold mb-4'>The Result</h2><p class='mb-6'>Now I have a fully dynamic blog system where adding a new post is as simple as adding a new entry to the JSON file. No need to create new HTML files or update navigation menus - everything happens automatically. It's efficient, maintainable, and scales easily as I add more content.</p>",
    "date": "2025-01-12",
    "tags": ["JavaScript", "JSON", "Dynamic Content", "Web Development"],
    "slug": "creating-dynamic-blog-system-json-javascript",
    "image": "./images/dynamic-loading.jpg"
  }
]
